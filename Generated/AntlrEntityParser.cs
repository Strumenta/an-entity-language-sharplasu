//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammars\AntlrEntityParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Strumenta.Entity.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class AntlrEntityParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_CLASS=1, MODULE=2, IMPORT=3, TYPE=4, COLON=5, SEMI=6, COMMA=7, DOT=8, 
		LSQRD=9, RSQRD=10, LCRLY=11, RCRLY=12, LPAREN=13, RPAREN=14, ADD=15, SUB=16, 
		MUL=17, DIV=18, EQ=19, STRING=20, INTEGER=21, BOOLEAN=22, REAL=23, ID=24, 
		COMMENT=25, WS=26;
	public const int
		RULE_module_declaration = 0, RULE_module_import = 1, RULE_type_declaration = 2, 
		RULE_entity_declaration = 3, RULE_feature_declaration = 4, RULE_assignment = 5, 
		RULE_expression = 6, RULE_literal = 7;
	public static readonly string[] ruleNames = {
		"module_declaration", "module_import", "type_declaration", "entity_declaration", 
		"feature_declaration", "assignment", "expression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'module'", "'import'", "'type'", "':'", "';'", "','", 
		"'.'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'+'", "'-'", "'*'", 
		"'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_CLASS", "MODULE", "IMPORT", "TYPE", "COLON", "SEMI", "COMMA", 
		"DOT", "LSQRD", "RSQRD", "LCRLY", "RCRLY", "LPAREN", "RPAREN", "ADD", 
		"SUB", "MUL", "DIV", "EQ", "STRING", "INTEGER", "BOOLEAN", "REAL", "ID", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AntlrEntityParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AntlrEntityParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AntlrEntityParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AntlrEntityParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Module_declarationContext : ParserRuleContext {
		public IToken name;
		public Module_importContext _module_import;
		public IList<Module_importContext> _imports = new List<Module_importContext>();
		public Type_declarationContext _type_declaration;
		public IList<Type_declarationContext> _types = new List<Type_declarationContext>();
		public Entity_declarationContext _entity_declaration;
		public IList<Entity_declarationContext> _entities = new List<Entity_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(AntlrEntityParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext[] type_declaration() {
			return GetRuleContexts<Type_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration(int i) {
			return GetRuleContext<Type_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarationContext[] entity_declaration() {
			return GetRuleContexts<Entity_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarationContext entity_declaration(int i) {
			return GetRuleContext<Entity_declarationContext>(i);
		}
		public Module_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_declaration; } }
	}

	[RuleVersion(0)]
	public Module_declarationContext module_declaration() {
		Module_declarationContext _localctx = new Module_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_module_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(MODULE);
			State = 17;
			_localctx.name = Match(ID);
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 18;
				_localctx._module_import = module_import();
				_localctx._imports.Add(_localctx._module_import);
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPE) {
				{
				{
				State = 24;
				_localctx._type_declaration = type_declaration();
				_localctx._types.Add(_localctx._type_declaration);
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_CLASS) {
				{
				{
				State = 30;
				_localctx._entity_declaration = entity_declaration();
				_localctx._entities.Add(_localctx._entity_declaration);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(AntlrEntityParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 2, RULE_module_import);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(IMPORT);
			State = 37;
			_localctx.name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(AntlrEntityParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(TYPE);
			State = 40;
			_localctx.name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarationContext : ParserRuleContext {
		public IToken name;
		public IToken base_class;
		public Feature_declarationContext _feature_declaration;
		public IList<Feature_declarationContext> _features = new List<Feature_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLASS() { return GetToken(AntlrEntityParser.KW_CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCRLY() { return GetToken(AntlrEntityParser.LCRLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCRLY() { return GetToken(AntlrEntityParser.RCRLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AntlrEntityParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AntlrEntityParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrEntityParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Feature_declarationContext[] feature_declaration() {
			return GetRuleContexts<Feature_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Feature_declarationContext feature_declaration(int i) {
			return GetRuleContext<Feature_declarationContext>(i);
		}
		public Entity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declaration; } }
	}

	[RuleVersion(0)]
	public Entity_declarationContext entity_declaration() {
		Entity_declarationContext _localctx = new Entity_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_entity_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(KW_CLASS);
			State = 43;
			_localctx.name = Match(ID);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 44;
				Match(COLON);
				State = 45;
				_localctx.base_class = Match(ID);
				}
			}

			State = 48;
			Match(LCRLY);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 49;
				_localctx._feature_declaration = feature_declaration();
				_localctx._features.Add(_localctx._feature_declaration);
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55;
			Match(RCRLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Feature_declarationContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrEntityParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AntlrEntityParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AntlrEntityParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Feature_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feature_declaration; } }
	}

	[RuleVersion(0)]
	public Feature_declarationContext feature_declaration() {
		Feature_declarationContext _localctx = new Feature_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_feature_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_localctx.name = Match(ID);
			State = 58;
			Match(COLON);
			State = 59;
			_localctx.type = Match(ID);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 60;
				assignment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(AntlrEntityParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(EQ);
			State = 64;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Reference_expressionContext : ExpressionContext {
		public IToken context;
		public IToken target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AntlrEntityParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AntlrEntityParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(AntlrEntityParser.DOT, 0); }
		public Reference_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Operator_expressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(AntlrEntityParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(AntlrEntityParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(AntlrEntityParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(AntlrEntityParser.DIV, 0); }
		public Operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Literal_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Literal_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new Reference_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 69;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 67;
					((Reference_expressionContext)_localctx).context = Match(ID);
					State = 68;
					Match(DOT);
					}
					break;
				}
				State = 71;
				((Reference_expressionContext)_localctx).target = Match(ID);
				}
				break;
			case STRING:
			case INTEGER:
			case BOOLEAN:
			case REAL:
				{
				_localctx = new Literal_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72;
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 89;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 87;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new Operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 75;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 76;
						((Operator_expressionContext)_localctx).op = Match(ADD);
						State = 77;
						((Operator_expressionContext)_localctx).right = expression(6);
						}
						break;
					case 2:
						{
						_localctx = new Operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 78;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 79;
						((Operator_expressionContext)_localctx).op = Match(SUB);
						State = 80;
						((Operator_expressionContext)_localctx).right = expression(5);
						}
						break;
					case 3:
						{
						_localctx = new Operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 81;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 82;
						((Operator_expressionContext)_localctx).op = Match(MUL);
						State = 83;
						((Operator_expressionContext)_localctx).right = expression(4);
						}
						break;
					case 4:
						{
						_localctx = new Operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 84;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 85;
						((Operator_expressionContext)_localctx).op = Match(DIV);
						State = 86;
						((Operator_expressionContext)_localctx).right = expression(3);
						}
						break;
					}
					} 
				}
				State = 91;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_literalContext : LiteralContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AntlrEntityParser.STRING, 0); }
		public String_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Real_literalContext : LiteralContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(AntlrEntityParser.REAL, 0); }
		public Real_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Boolean_literalContext : LiteralContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(AntlrEntityParser.BOOLEAN, 0); }
		public Boolean_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Integer_literalContext : LiteralContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AntlrEntityParser.INTEGER, 0); }
		public Integer_literalContext(LiteralContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new String_literalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				((String_literalContext)_localctx).value = Match(STRING);
				}
				break;
			case INTEGER:
				_localctx = new Integer_literalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				((Integer_literalContext)_localctx).value = Match(INTEGER);
				}
				break;
			case BOOLEAN:
				_localctx = new Boolean_literalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				((Boolean_literalContext)_localctx).value = Match(BOOLEAN);
				}
				break;
			case REAL:
				_localctx = new Real_literalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 95;
				((Real_literalContext)_localctx).value = Match(REAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,26,99,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,0,5,0,26,8,0,10,0,12,0,29,
		9,0,1,0,5,0,32,8,0,10,0,12,0,35,9,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,
		3,1,3,3,3,47,8,3,1,3,1,3,5,3,51,8,3,10,3,12,3,54,9,3,1,3,1,3,1,4,1,4,1,
		4,1,4,3,4,62,8,4,1,5,1,5,1,5,1,6,1,6,1,6,3,6,70,8,6,1,6,1,6,3,6,74,8,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,88,8,6,10,6,12,6,91,
		9,6,1,7,1,7,1,7,1,7,3,7,97,8,7,1,7,0,1,12,8,0,2,4,6,8,10,12,14,0,0,105,
		0,16,1,0,0,0,2,36,1,0,0,0,4,39,1,0,0,0,6,42,1,0,0,0,8,57,1,0,0,0,10,63,
		1,0,0,0,12,73,1,0,0,0,14,96,1,0,0,0,16,17,5,2,0,0,17,21,5,24,0,0,18,20,
		3,2,1,0,19,18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,27,
		1,0,0,0,23,21,1,0,0,0,24,26,3,4,2,0,25,24,1,0,0,0,26,29,1,0,0,0,27,25,
		1,0,0,0,27,28,1,0,0,0,28,33,1,0,0,0,29,27,1,0,0,0,30,32,3,6,3,0,31,30,
		1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,1,1,0,0,0,35,33,1,
		0,0,0,36,37,5,3,0,0,37,38,5,24,0,0,38,3,1,0,0,0,39,40,5,4,0,0,40,41,5,
		24,0,0,41,5,1,0,0,0,42,43,5,1,0,0,43,46,5,24,0,0,44,45,5,5,0,0,45,47,5,
		24,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,48,1,0,0,0,48,52,5,11,0,0,49,51,
		3,8,4,0,50,49,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,55,
		1,0,0,0,54,52,1,0,0,0,55,56,5,12,0,0,56,7,1,0,0,0,57,58,5,24,0,0,58,59,
		5,5,0,0,59,61,5,24,0,0,60,62,3,10,5,0,61,60,1,0,0,0,61,62,1,0,0,0,62,9,
		1,0,0,0,63,64,5,19,0,0,64,65,3,12,6,0,65,11,1,0,0,0,66,69,6,6,-1,0,67,
		68,5,24,0,0,68,70,5,8,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,
		74,5,24,0,0,72,74,3,14,7,0,73,66,1,0,0,0,73,72,1,0,0,0,74,89,1,0,0,0,75,
		76,10,5,0,0,76,77,5,15,0,0,77,88,3,12,6,6,78,79,10,4,0,0,79,80,5,16,0,
		0,80,88,3,12,6,5,81,82,10,3,0,0,82,83,5,17,0,0,83,88,3,12,6,4,84,85,10,
		2,0,0,85,86,5,18,0,0,86,88,3,12,6,3,87,75,1,0,0,0,87,78,1,0,0,0,87,81,
		1,0,0,0,87,84,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,13,
		1,0,0,0,91,89,1,0,0,0,92,97,5,20,0,0,93,97,5,21,0,0,94,97,5,22,0,0,95,
		97,5,23,0,0,96,92,1,0,0,0,96,93,1,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,
		15,1,0,0,0,11,21,27,33,46,52,61,69,73,87,89,96
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Strumenta.Entity.Parser
