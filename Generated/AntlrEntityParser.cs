//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammars\AntlrEntityParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Strumenta.Entity.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class AntlrEntityParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ENTITY=1, MODULE=2, IMPORT=3, RETURN=4, LET=5, NEW=6, COLON=7, SEMI=8, 
		COMMA=9, DOT=10, LSQRD=11, RSQRD=12, LCRLY=13, RCRLY=14, LPAREN=15, RPAREN=16, 
		ADD=17, SUB=18, MUL=19, DIV=20, EQ=21, STRING=22, INTEGER=23, BOOLEAN=24, 
		ID=25, COMMENT=26, WS=27;
	public const int
		RULE_module_declaration = 0, RULE_module_import = 1, RULE_entity_declaration = 2, 
		RULE_feature_declaration = 3, RULE_operation_declaration = 4, RULE_parameter_declaration = 5, 
		RULE_statement = 6, RULE_binding_statement = 7, RULE_variable_declaration = 8, 
		RULE_return_statement = 9, RULE_expression = 10, RULE_argument_list = 11, 
		RULE_literal = 12;
	public static readonly string[] ruleNames = {
		"module_declaration", "module_import", "entity_declaration", "feature_declaration", 
		"operation_declaration", "parameter_declaration", "statement", "binding_statement", 
		"variable_declaration", "return_statement", "expression", "argument_list", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'entity'", "'module'", "'import'", "'return'", "'let'", "'new'", 
		"':'", "';'", "','", "'.'", "'['", "']'", "'{'", "'}'", "'('", "')'", 
		"'+'", "'-'", "'*'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ENTITY", "MODULE", "IMPORT", "RETURN", "LET", "NEW", "COLON", "SEMI", 
		"COMMA", "DOT", "LSQRD", "RSQRD", "LCRLY", "RCRLY", "LPAREN", "RPAREN", 
		"ADD", "SUB", "MUL", "DIV", "EQ", "STRING", "INTEGER", "BOOLEAN", "ID", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AntlrEntityParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AntlrEntityParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AntlrEntityParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AntlrEntityParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Module_declarationContext : ParserRuleContext {
		public IToken name;
		public Module_importContext _module_import;
		public IList<Module_importContext> _imports = new List<Module_importContext>();
		public Entity_declarationContext _entity_declaration;
		public IList<Entity_declarationContext> _entities = new List<Entity_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(AntlrEntityParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarationContext[] entity_declaration() {
			return GetRuleContexts<Entity_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarationContext entity_declaration(int i) {
			return GetRuleContext<Entity_declarationContext>(i);
		}
		public Module_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_declaration; } }
	}

	[RuleVersion(0)]
	public Module_declarationContext module_declaration() {
		Module_declarationContext _localctx = new Module_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_module_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			Match(MODULE);
			State = 27;
			_localctx.name = Match(ID);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 28;
				_localctx._module_import = module_import();
				_localctx._imports.Add(_localctx._module_import);
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENTITY) {
				{
				{
				State = 34;
				_localctx._entity_declaration = entity_declaration();
				_localctx._entities.Add(_localctx._entity_declaration);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(AntlrEntityParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 2, RULE_module_import);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(IMPORT);
			State = 41;
			_localctx.name = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarationContext : ParserRuleContext {
		public IToken name;
		public Feature_declarationContext _feature_declaration;
		public IList<Feature_declarationContext> _features = new List<Feature_declarationContext>();
		public Operation_declarationContext _operation_declaration;
		public IList<Operation_declarationContext> _operations = new List<Operation_declarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(AntlrEntityParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCRLY() { return GetToken(AntlrEntityParser.LCRLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCRLY() { return GetToken(AntlrEntityParser.RCRLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Feature_declarationContext[] feature_declaration() {
			return GetRuleContexts<Feature_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Feature_declarationContext feature_declaration(int i) {
			return GetRuleContext<Feature_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operation_declarationContext[] operation_declaration() {
			return GetRuleContexts<Operation_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operation_declarationContext operation_declaration(int i) {
			return GetRuleContext<Operation_declarationContext>(i);
		}
		public Entity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declaration; } }
	}

	[RuleVersion(0)]
	public Entity_declarationContext entity_declaration() {
		Entity_declarationContext _localctx = new Entity_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_entity_declaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(ENTITY);
			State = 44;
			_localctx.name = Match(ID);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LCRLY) {
				{
				State = 45;
				Match(LCRLY);
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 46;
						_localctx._feature_declaration = feature_declaration();
						_localctx._features.Add(_localctx._feature_declaration);
						}
						} 
					}
					State = 51;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 52;
					_localctx._operation_declaration = operation_declaration();
					_localctx._operations.Add(_localctx._operation_declaration);
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 58;
				Match(RCRLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Feature_declarationContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrEntityParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AntlrEntityParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AntlrEntityParser.ID, i);
		}
		public Feature_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feature_declaration; } }
	}

	[RuleVersion(0)]
	public Feature_declarationContext feature_declaration() {
		Feature_declarationContext _localctx = new Feature_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_feature_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_localctx.name = Match(ID);
			State = 62;
			Match(COLON);
			State = 63;
			_localctx.type = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operation_declarationContext : ParserRuleContext {
		public IToken name;
		public Parameter_declarationContext _parameter_declaration;
		public IList<Parameter_declarationContext> _parameters = new List<Parameter_declarationContext>();
		public IToken type;
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AntlrEntityParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AntlrEntityParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCRLY() { return GetToken(AntlrEntityParser.LCRLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCRLY() { return GetToken(AntlrEntityParser.RCRLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AntlrEntityParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AntlrEntityParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrEntityParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declarationContext[] parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AntlrEntityParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AntlrEntityParser.COMMA, i);
		}
		public Operation_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation_declaration; } }
	}

	[RuleVersion(0)]
	public Operation_declarationContext operation_declaration() {
		Operation_declarationContext _localctx = new Operation_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_operation_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			_localctx.name = Match(ID);
			State = 66;
			Match(LPAREN);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 67;
				_localctx._parameter_declaration = parameter_declaration();
				_localctx._parameters.Add(_localctx._parameter_declaration);
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 68;
					Match(COMMA);
					State = 69;
					_localctx._parameter_declaration = parameter_declaration();
					_localctx._parameters.Add(_localctx._parameter_declaration);
					}
					}
					State = 74;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 77;
			Match(RPAREN);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 78;
				Match(COLON);
				State = 79;
				_localctx.type = Match(ID);
				}
			}

			State = 82;
			Match(LCRLY);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RETURN || _la==LET) {
				{
				{
				State = 83;
				_localctx._statement = statement();
				_localctx._statements.Add(_localctx._statement);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			Match(RCRLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrEntityParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AntlrEntityParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AntlrEntityParser.ID, i);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_localctx.name = Match(ID);
			State = 92;
			Match(COLON);
			State = 93;
			_localctx.type = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binding_statementContext binding_statement() {
			return GetRuleContext<Binding_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				binding_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				return_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_statementContext : ParserRuleContext {
		public Variable_declarationContext variable;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(AntlrEntityParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(AntlrEntityParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Binding_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_statement; } }
	}

	[RuleVersion(0)]
	public Binding_statementContext binding_statement() {
		Binding_statementContext _localctx = new Binding_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_binding_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(LET);
			State = 100;
			_localctx.variable = variable_declaration();
			State = 101;
			Match(EQ);
			State = 102;
			_localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AntlrEntityParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AntlrEntityParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AntlrEntityParser.ID, i);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_localctx.name = Match(ID);
			State = 105;
			Match(COLON);
			State = 106;
			_localctx.type = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AntlrEntityParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(RETURN);
			State = 109;
			_localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Reference_expressionContext : ExpressionContext {
		public ExpressionContext context;
		public IToken target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(AntlrEntityParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Reference_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Operator_expressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(AntlrEntityParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(AntlrEntityParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(AntlrEntityParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(AntlrEntityParser.DIV, 0); }
		public Operator_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Constructor_expressionContext : ExpressionContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(AntlrEntityParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		public Constructor_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Literal_expressionContext : ExpressionContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AntlrEntityParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AntlrEntityParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(AntlrEntityParser.BOOLEAN, 0); }
		public Literal_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Invocation_expressionContext : ExpressionContext {
		public ExpressionContext context;
		public IToken target;
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AntlrEntityParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(AntlrEntityParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Invocation_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new Invocation_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 112;
				((Invocation_expressionContext)_localctx).target = Match(ID);
				State = 113;
				argument_list();
				}
				break;
			case 2:
				{
				_localctx = new Reference_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114;
				((Reference_expressionContext)_localctx).target = Match(ID);
				}
				break;
			case 3:
				{
				_localctx = new Constructor_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 115;
				Match(NEW);
				State = 116;
				((Constructor_expressionContext)_localctx).name = Match(ID);
				State = 117;
				argument_list();
				}
				break;
			case 4:
				{
				_localctx = new Literal_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118;
				((Literal_expressionContext)_localctx).value = Match(STRING);
				}
				break;
			case 5:
				{
				_localctx = new Literal_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				((Literal_expressionContext)_localctx).value = Match(INTEGER);
				}
				break;
			case 6:
				{
				_localctx = new Literal_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120;
				((Literal_expressionContext)_localctx).value = Match(BOOLEAN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 142;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new Operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 124;
						((Operator_expressionContext)_localctx).op = Match(ADD);
						State = 125;
						((Operator_expressionContext)_localctx).right = expression(11);
						}
						break;
					case 2:
						{
						_localctx = new Operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 127;
						((Operator_expressionContext)_localctx).op = Match(SUB);
						State = 128;
						((Operator_expressionContext)_localctx).right = expression(10);
						}
						break;
					case 3:
						{
						_localctx = new Operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 129;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 130;
						((Operator_expressionContext)_localctx).op = Match(MUL);
						State = 131;
						((Operator_expressionContext)_localctx).right = expression(9);
						}
						break;
					case 4:
						{
						_localctx = new Operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Operator_expressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 133;
						((Operator_expressionContext)_localctx).op = Match(DIV);
						State = 134;
						((Operator_expressionContext)_localctx).right = expression(8);
						}
						break;
					case 5:
						{
						_localctx = new Invocation_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Invocation_expressionContext)_localctx).context = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 136;
						Match(DOT);
						State = 137;
						((Invocation_expressionContext)_localctx).target = Match(ID);
						State = 138;
						argument_list();
						}
						break;
					case 6:
						{
						_localctx = new Reference_expressionContext(new ExpressionContext(_parentctx, _parentState));
						((Reference_expressionContext)_localctx).context = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 140;
						Match(DOT);
						State = 141;
						((Reference_expressionContext)_localctx).target = Match(ID);
						}
						break;
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _arguments = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AntlrEntityParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AntlrEntityParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AntlrEntityParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AntlrEntityParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(LPAREN);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 62914624L) != 0)) {
				{
				State = 148;
				_localctx._expression = expression(0);
				_localctx._arguments.Add(_localctx._expression);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 149;
					Match(COMMA);
					State = 150;
					_localctx._expression = expression(0);
					_localctx._arguments.Add(_localctx._expression);
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 158;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class String_literalContext : LiteralContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AntlrEntityParser.STRING, 0); }
		public String_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Boolean_literalContext : LiteralContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(AntlrEntityParser.BOOLEAN, 0); }
		public Boolean_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Integer_literalContext : LiteralContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(AntlrEntityParser.INTEGER, 0); }
		public Integer_literalContext(LiteralContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new String_literalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				((String_literalContext)_localctx).value = Match(STRING);
				}
				break;
			case INTEGER:
				_localctx = new Integer_literalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				((Integer_literalContext)_localctx).value = Match(INTEGER);
				}
				break;
			case BOOLEAN:
				_localctx = new Boolean_literalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 162;
				((Boolean_literalContext)_localctx).value = Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,27,166,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,5,0,30,8,
		0,10,0,12,0,33,9,0,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,5,2,48,8,2,10,2,12,2,51,9,2,1,2,5,2,54,8,2,10,2,12,2,57,9,2,1,
		2,3,2,60,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,71,8,4,10,4,12,4,
		74,9,4,3,4,76,8,4,1,4,1,4,1,4,3,4,81,8,4,1,4,1,4,5,4,85,8,4,10,4,12,4,
		88,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,3,6,98,8,6,1,7,1,7,1,7,1,7,1,7,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,3,10,122,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,143,8,10,10,10,12,10,
		146,9,10,1,11,1,11,1,11,1,11,5,11,152,8,11,10,11,12,11,155,9,11,3,11,157,
		8,11,1,11,1,11,1,12,1,12,1,12,3,12,164,8,12,1,12,0,1,20,13,0,2,4,6,8,10,
		12,14,16,18,20,22,24,0,0,177,0,26,1,0,0,0,2,40,1,0,0,0,4,43,1,0,0,0,6,
		61,1,0,0,0,8,65,1,0,0,0,10,91,1,0,0,0,12,97,1,0,0,0,14,99,1,0,0,0,16,104,
		1,0,0,0,18,108,1,0,0,0,20,121,1,0,0,0,22,147,1,0,0,0,24,163,1,0,0,0,26,
		27,5,2,0,0,27,31,5,25,0,0,28,30,3,2,1,0,29,28,1,0,0,0,30,33,1,0,0,0,31,
		29,1,0,0,0,31,32,1,0,0,0,32,37,1,0,0,0,33,31,1,0,0,0,34,36,3,4,2,0,35,
		34,1,0,0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,1,1,0,0,0,39,37,
		1,0,0,0,40,41,5,3,0,0,41,42,5,25,0,0,42,3,1,0,0,0,43,44,5,1,0,0,44,59,
		5,25,0,0,45,49,5,13,0,0,46,48,3,6,3,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,
		1,0,0,0,49,50,1,0,0,0,50,55,1,0,0,0,51,49,1,0,0,0,52,54,3,8,4,0,53,52,
		1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,55,
		1,0,0,0,58,60,5,14,0,0,59,45,1,0,0,0,59,60,1,0,0,0,60,5,1,0,0,0,61,62,
		5,25,0,0,62,63,5,7,0,0,63,64,5,25,0,0,64,7,1,0,0,0,65,66,5,25,0,0,66,75,
		5,15,0,0,67,72,3,10,5,0,68,69,5,9,0,0,69,71,3,10,5,0,70,68,1,0,0,0,71,
		74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,75,
		67,1,0,0,0,75,76,1,0,0,0,76,77,1,0,0,0,77,80,5,16,0,0,78,79,5,7,0,0,79,
		81,5,25,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,86,5,13,0,0,83,
		85,3,12,6,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,
		89,1,0,0,0,88,86,1,0,0,0,89,90,5,14,0,0,90,9,1,0,0,0,91,92,5,25,0,0,92,
		93,5,7,0,0,93,94,5,25,0,0,94,11,1,0,0,0,95,98,3,14,7,0,96,98,3,18,9,0,
		97,95,1,0,0,0,97,96,1,0,0,0,98,13,1,0,0,0,99,100,5,5,0,0,100,101,3,16,
		8,0,101,102,5,21,0,0,102,103,3,20,10,0,103,15,1,0,0,0,104,105,5,25,0,0,
		105,106,5,7,0,0,106,107,5,25,0,0,107,17,1,0,0,0,108,109,5,4,0,0,109,110,
		3,20,10,0,110,19,1,0,0,0,111,112,6,10,-1,0,112,113,5,25,0,0,113,122,3,
		22,11,0,114,122,5,25,0,0,115,116,5,6,0,0,116,117,5,25,0,0,117,122,3,22,
		11,0,118,122,5,22,0,0,119,122,5,23,0,0,120,122,5,24,0,0,121,111,1,0,0,
		0,121,114,1,0,0,0,121,115,1,0,0,0,121,118,1,0,0,0,121,119,1,0,0,0,121,
		120,1,0,0,0,122,144,1,0,0,0,123,124,10,10,0,0,124,125,5,17,0,0,125,143,
		3,20,10,11,126,127,10,9,0,0,127,128,5,18,0,0,128,143,3,20,10,10,129,130,
		10,8,0,0,130,131,5,19,0,0,131,143,3,20,10,9,132,133,10,7,0,0,133,134,5,
		20,0,0,134,143,3,20,10,8,135,136,10,12,0,0,136,137,5,10,0,0,137,138,5,
		25,0,0,138,143,3,22,11,0,139,140,10,11,0,0,140,141,5,10,0,0,141,143,5,
		25,0,0,142,123,1,0,0,0,142,126,1,0,0,0,142,129,1,0,0,0,142,132,1,0,0,0,
		142,135,1,0,0,0,142,139,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,
		1,0,0,0,145,21,1,0,0,0,146,144,1,0,0,0,147,156,5,15,0,0,148,153,3,20,10,
		0,149,150,5,9,0,0,150,152,3,20,10,0,151,149,1,0,0,0,152,155,1,0,0,0,153,
		151,1,0,0,0,153,154,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,156,148,1,
		0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,159,5,16,0,0,159,23,1,0,0,0,
		160,164,5,22,0,0,161,164,5,23,0,0,162,164,5,24,0,0,163,160,1,0,0,0,163,
		161,1,0,0,0,163,162,1,0,0,0,164,25,1,0,0,0,16,31,37,49,55,59,72,75,80,
		86,97,121,142,144,153,156,163
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Strumenta.Entity.Parser
